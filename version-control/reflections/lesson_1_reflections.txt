- "diff -u game_old.js game_new.js"
 => show the difference between two files in unicode form"

How did viewing a diff between two versions of a file help you see the bug that was introduced?
Can directly spot the place that you just modified and check whether anything is going wrong there. 

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
You can follow the thought process of the program or the construction process which will help you familiar with the building process of a big program and use it as you are building your own programs.  

Git commits: fix off-by-one bug, add cool new feature, improve user docs

A good rule of thumb is to make one commit per logical change. For example, if you fixed a typo, then fixed a bug in a separate part of the file, you should use one commit for each change since they are logically separate. If you do this, each commit will have one purpose that can be easily understood. Git allows you to write a short message explaining what was changed in each commit, and that message will be more useful if each commit has a single logical change.

Some features are composed of multiple logical parts, so breaking the one hour change into smaller commits may be a good idea. This might also be a good size though. 
 
You fix two small bugs in different functions and commit them both at once.
This commit is probably too big. It would have been better to commit after the first bug fix, since the two bug fixes aren't related to each other.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
pros: can control the size of one's commit and have some words about the specific change. It would be more compact and meaningful for each commit.
cons: user should learn to control the size of commit or it'll lead to ineffective communication.   

Tracking files: 
In competition style coding, you might use multiple files to solve a problem, or the problems might have some interdependencies. But if the problems were unrelated and each could be solved in a single file, you would want to track them separately.
Different chapters of a novel might be fairly independent, so it’s possible you would want to track them separately. But what if you wanted to make sure the transitions between chapters were smooth? Or what if you wanted to rename a character?

- git log --stat #get basic info about the change, ex. how many lines of codes are added, deleted

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Because Git dose commit manually, and Docs does it aitomatically, so once you make a change in Docs, it'll automatically commit the file


Cloning a Repository: run 
- git clone [URL]
followed by a space and the repository URL. +> and cd into the folder
Exiting git log:  press q (which stands for quit).
Getting Colored Output: to get colored diff output, run git config --global color.ui auto
Ubuntu: To copy and paste within the terminal on Ubuntu, use Ctrl+Shift+C and Ctrl+Shift+V.

How can you use the commands git log and git diff to view the history of files?
Use git log to see what each change of the file is, see the message to find what you're looking for and use git diff to check out the change 

Git Errors and Warnings:
Should not be doing an octopus
Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation.

You are in 'detached HEAD' state
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, which we’ll see in the next video. Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

- git checkout (id) => return to the stage when the commit (id) was commited

How might using version control make you more confident to make changes that could break something?
I can experiment on my code without worrying about cannot go back by using version control. Rethink entire code base. Risk taker, explore more possibilities without fear of breaking all the project.

Run the following Git configuration commands. The first one will need to be modified if you are using a text editor other than Sublime, or if Sublime is installed in another location for you. See this page for the correct command for a couple of other popular text editors. For any other editor, you'll need to enter the command you use to launch that editor from the terminal.

- git config --global core.editor "'/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' -n -w"
- git config --global push.default upstream
- git config --global merge.conflictstyle diff3

(Instead of the first command, you may be able to use the simpler git config --global core.editor "subl -n -w" as shown in the video, but many students have found this does not work for them.)

Now that you have your workspace set up, what do you want to try using Git for?
Develop my own website(blog)

Using git diff to compare the two versions would show the same changes as diff -u did in the previous exercise.
This is true. diff -u and git diff show very similar outputs. Even if the exact format was slightly different, the actual changes indicated would be the same. 

The name of the file would remain the same. Git does not rename files when you save a new commit. Instead, Git uses the commit IDs to refer to different versions of the files, and you can use git checkout to access old versions of your files. 

To save two versions of the file, you would create two commits.
This is true. Commits are Git's way of saving versions, so to save two different versions, you would create two commits.

Compare two commits, printing each line that is present in one commit but not the other.
- git diff 
will do this. It takes two arguments - the two commit ids to compare.

Make a copy of an entire Git repository, including the history, onto your own computer.
- git clone 
will do this. It takes one argument - the url of the repository to copy.

Temporarily reset all files in a directory to their state at the time of a specific commit.
- git checkout 
will do this. It takes one argument - the commit ID to restore.

Show the commits made in this repository, starting with the most recent.
- git log 
will do this. It doesn't take any arguments.

For copying a directory, you weren't expected to know this, but it is possible to copy a directory from one computer to another using the command 
- scp
, which stands for "secure copy". The name was chosen because the scp command lets you securely copy a directory from one computer to another. 

That is because git diff considers the first argument as the "original", and the second argument as the "new" version, so additions are lines present in the second argument but not the first. 

Behavior of git checkout
Checking out an earlier commit will change the state of at least one file.
This is sometimes true. Git doesn't allow you to save a new commit if no files have been updated, so you might think this is always true. However, it's possible to do the following:

    Save a commit (call this commit 1).
    Update some files and save another commit (call this commit 2).
    Change all the files back to their state during commit 1, then save again (call this commit 3).

This sometimes happens if commit 2 contained a bug, and it's important to fix the bug quickly. The easiest thing to do might be to remove all the changes introduced by commit 2 to fix the bug, then figure out how to safely reintroduce the changes later. At this point, commit 3 is the latest commit, so if you checkout commit 1, none of the files will be changed.